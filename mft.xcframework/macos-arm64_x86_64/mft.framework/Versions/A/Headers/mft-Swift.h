#if 0
#elif defined(__arm64__) && __arm64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef MFT_SWIFT_H
#define MFT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="mft",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

/// Error codes used in NSError objects reported by methods of MFTSftpConnectionInfo class.
typedef SWIFT_ENUM(NSInteger, MFTErrorCode, open) {
  MFTErrorCodeNo_error = 0,
  MFTErrorCodeNo_session = 1,
  MFTErrorCodeNo_pubkey_method = 2,
  MFTErrorCodeNo_password_method = 3,
  MFTErrorCodeAuthentication_failed = 4,
  MFTErrorCodeLocal_read_error = 5,
  MFTErrorCodeLocal_write_error = 6,
  MFTErrorCodeLocal_open_error_for_reading = 7,
  MFTErrorCodeLocal_open_error_for_writing = 8,
  MFTErrorCodeLocal_file_not_readable = 9,
  MFTErrorCodeLocal_file_not_writable = 10,
  MFTErrorCodeWrong_keyfile = 11,
  MFTErrorCodeFile_not_found = 12,
  MFTErrorCodeCanceled = 999,
};

/// File system statistics.
SWIFT_CLASS("_TtC3mft18MFTFilesystemStats")
@interface MFTFilesystemStats : NSObject
@property (nonatomic) uint64_t size;
@property (nonatomic) uint64_t freeSpace;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Status of the hosts.
typedef SWIFT_ENUM(NSInteger, MFTKnownHostStatus, open) {
  MFTKnownHostStatusKNOWN_HOSTS_ERROR = -2,
  MFTKnownHostStatusKNOWN_HOSTS_NOT_FOUND = -1,
  MFTKnownHostStatusKNOWN_HOSTS_UNKNOWN = 0,
  MFTKnownHostStatusKNOWN_HOSTS_OK = 1,
  MFTKnownHostStatusKNOWN_HOSTS_CHANGED = 2,
  MFTKnownHostStatusKNOWN_HOSTS_OTHER = 3,
  MFTKnownHostStatusNO_SESSION = 100,
};

@class NSString;
@class MFTSftpConnectionInfo;
@class MFTSftpItem;
@class NSOutputStream;
@class NSInputStream;
@class NSDate;
/// The class represents a single SFTP connection. It contains method for establishing connections,
/// authenticating on the server as well as methods for items manipulation (like uploading, downloading,
/// removing, creating, …).
/// The objects of this class are NOT thread safe and must NOT be used to running multiple operations
/// at the same time. If you need such functionality, create multiple MFTSftpConnection (and by doing that
/// establish multiple SFTP connections).
SWIFT_CLASS("_TtC3mft17MFTSftpConnection")
@interface MFTSftpConnection : NSObject
@property (nonatomic) NSInteger defRqCount;
/// Create a new connection with password based authentication data.
/// \param hostname The SFTP server hostname.
///
/// \param port The SFTP server port name.
///
/// \param username The user name to authenticate as.
///
/// \param password The user password.
///
- (nonnull instancetype)initWithHostname:(NSString * _Nonnull)hostname port:(NSInteger)port username:(NSString * _Nonnull)username password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
/// Create a new connection with public key based authentication data read from a file.
/// \param hostname The SFTP server hostname.
///
/// \param port The SFTP server port name.
///
/// \param username The user name to authenticate as.
///
/// \param prvKeyPath The path of file containing the private key to use.
///
/// \param passphrase The key passphrase to use - is no passphrase was set, pass a blank string.
///
- (nonnull instancetype)initWithHostname:(NSString * _Nonnull)hostname port:(NSInteger)port username:(NSString * _Nonnull)username prvKeyPath:(NSString * _Nonnull)prvKeyPath passphrase:(NSString * _Nonnull)passphrase OBJC_DESIGNATED_INITIALIZER;
/// Create a new connection with public key based authentication data read from a string.
/// \param hostname The SFTP server hostname.
///
/// \param port The SFTP server port name.
///
/// \param username The user name to authenticate as.
///
/// \param prvKey The private key to use.
///
/// \param passphrase The key passphrase to use - is no passphrase was set, pass a blank string.
///
- (nonnull instancetype)initWithHostname:(NSString * _Nonnull)hostname port:(NSInteger)port username:(NSString * _Nonnull)username prvKey:(NSString * _Nonnull)prvKey passphrase:(NSString * _Nonnull)passphrase OBJC_DESIGNATED_INITIALIZER;
/// Create a new connection with ssh-agent based auth
/// \param hostname The SFTP server hostname.
///
/// \param port The SFTP server port name.
///
/// \param username The user name to authenticate as.
///
/// \param sshAgentSocketPath Path to ssh-agent unix socket
///
- (nonnull instancetype)initWithHostname:(NSString * _Nonnull)hostname port:(NSInteger)port username:(NSString * _Nonnull)username sshAgentSocketPath:(NSString * _Nonnull)sshAgentSocketPath OBJC_DESIGNATED_INITIALIZER;
/// Determine the server connectivity state.
@property (nonatomic, readonly) BOOL connected;
/// Establish connection with the server.
///
/// throws:
/// NSError on connection error.
- (BOOL)connectAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Authentucate on the server. Prior to calling this function, the connection to the server.
/// must be established.
///
/// throws:
/// NSError on error.
- (BOOL)authenticateAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Disconnect.
- (void)disconnect;
/// Return the connection info. The connection must be established but does not have to
/// be authenticated.
///
/// throws:
/// NSError on error and also when the connection is not established.
///
/// returns:
/// Connection info.
- (MFTSftpConnectionInfo * _Nullable)connectionInfoAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return the content of the given directory on the SFTP server. “.”, “..” and items with names that cannot
/// be converted using the current encoding are skipped.
/// \param path Remote directory path.
///
/// \param maxItems Limit for the number of items to returns,  0 = no limit.
///
///
/// throws:
/// NSError on error.
///
/// returns:
/// List of MFTSftpItem representing itemes on the given directory.
- (NSArray<MFTSftpItem *> * _Nullable)contentsOfDirectoryAtPath:(NSString * _Nonnull)path maxItems:(int64_t)maxItems error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns information for the remote item at the given path.
/// \param atPath The remote item path.
///
///
/// throws:
/// NSError on error (also when there is no item at the given path).
///
/// returns:
/// Temote item info.
- (MFTSftpItem * _Nullable)infoForFileAtPath:(NSString * _Nonnull)atPath error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return canonical (absolute) path for the given path
/// \param path the path to canonicalize.
///
///
/// throws:
/// NSError on error.
///
/// returns:
/// The canonical path.
- (NSString * _Nullable)canonicalPathForPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Resolve the target of the given symbolic link.
/// \param path Symbolic link path.
///
///
/// throws:
/// NSError on error, also when the path does not point to a symbolic link.
///
/// returns:
/// The link target path.
- (NSString * _Nullable)effectiveTargetForPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Create a new directory at the given path.
/// \param path The path of the folder to create.
///
///
/// throws:
/// NSError on error.
- (BOOL)createDirectoryAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
/// Create a new symbolic link.
/// \param path The path of the symbolic link to create.
///
/// \param destPath The target of the symbolic link to create.
///
///
/// throws:
/// NSError on error.
- (BOOL)createSymbolicLinkAtPath:(NSString * _Nonnull)path withDestinationPath:(NSString * _Nonnull)destPath error:(NSError * _Nullable * _Nullable)error;
/// Remote the directory at the given path.
/// \param path The path to remove.
///
///
/// throws:
/// NSError on error.
- (BOOL)removeDirectoryAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
/// Remote the file or the symbolic link at the given path.
/// \param path The path to remove.
///
///
/// throws:
/// NSError on error.
- (BOOL)removeFileAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
/// Download the content of the file at the given path to the output stream.
/// \param path The path of the file to download.
///
/// \param outputStream The output strem to use for storing donwloaded content - if the stream is closed, it will be opened.
///
/// \param pos Starting position in the source file to download - if >0, the outputStram must be create for appending.
///
/// \param progress Progress report callback - its two arguments are used to download bytes counter (including skipped bytes)
/// and the size of the file to download. The return value false can be used to abort the operation.
///
///
/// throws:
/// NSError on error.
- (BOOL)contentsAtPath:(NSString * _Nonnull)path toStream:(NSOutputStream * _Nonnull)outputStream fromPosition:(uint64_t)pos error:(NSError * _Nullable * _Nullable)error progress:(BOOL (^ _Nullable)(uint64_t, uint64_t))progress;
/// Upload the content of the given input stream to the remove file at path.
/// \param inputStream The source of data to upload.
///
/// \param path The path of the file to upload to.
///
/// \param append Should the upload append to the file.
///
/// \param progress Progress report callback - its argument represents uploaded bytes counter (including skipped bytes).
/// The return value false can be used to abort the operation.
///
///
/// throws:
/// NSError on error.
- (BOOL)writeWithStream:(NSInputStream * _Nonnull)inputStream toFileAtPath:(NSString * _Nonnull)path append:(BOOL)append error:(NSError * _Nullable * _Nullable)error progress:(BOOL (^ _Nullable)(uint64_t))progress;
/// Copy the item to a new path of the SFTP server.
/// \param fromPath Source path (on the server).
///
/// \param toPath Destination path (on the server).
///
/// \param progress Progress report callback - its two arguments are used to copied bytes counter
/// and the size of the file to copy. The return value false can be used to abort the operation.
///
///
/// throws:
/// NSError on error.
- (BOOL)copyItemAtPath:(NSString * _Nonnull)fromPath toFileAtPath:(NSString * _Nonnull)toPath error:(NSError * _Nullable * _Nullable)error progress:(BOOL (^ _Nullable)(uint64_t, uint64_t))progress;
/// Move the item to a new path on the SFTP server. The operation is performed on the server without
/// downloading/uploading the file data.
/// \param atPath The current path of the item to move.
///
/// \param toPath The the path of the item.
///
///
/// throws:
/// NSError on error.
- (BOOL)moveItemAtPath:(NSString * _Nonnull)atPath toPath:(NSString * _Nonnull)toPath error:(NSError * _Nullable * _Nullable)error;
/// Set modification and access time of the remote item.
/// \param mtime Modification time to set.
///
/// \param atime Access time to set.
///
/// \param path The item path.
///
///
/// throws:
/// NSError on error.
- (BOOL)setWithModificationTime:(NSDate * _Nullable)mtime accessTime:(NSDate * _Nullable)atime forPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
/// Set permissions for the given remote item.
/// \param permissions POSIX permissions to set.
///
/// \param path The item path to set permissions.
///
///
/// throws:
/// NSError on error.
- (BOOL)setWithPermissions:(uint32_t)permissions forPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
/// Returns file system info.
/// \param path The path of the item to return file system info for.
///
///
/// throws:
/// NSError on error.
///
/// returns:
/// File system info for the file system on which the given item resides.
- (MFTFilesystemStats * _Nullable)filesystemStatsForPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Check is connected host is known based on hashes in the given file.
/// \param path The path of file with the known hosts hashes.
///
///
/// returns:
/// One of MFTKnownHostStatus representing the status. Note, that this function does not throw an exception,
/// but instead in case when there is no connection it returns .NO_SESSION.
- (enum MFTKnownHostStatus)knownHostStatusInFile:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Add the hash of the connected host to the given file.
/// \param path The path of the file with known hosts hashes.
///
///
/// throws:
/// NSError on error.
- (BOOL)addKnownHostNameToFile:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
/// Returns the human readable fingerprint hash for the current connection.
///
/// throws:
/// NSError on error.
///
/// returns:
/// The fingerprint hash.
- (NSString * _Nullable)fingerprintHashAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Upload the file at the given file to the remote file.
/// \param path The  source (local) file path.
///
/// \param toFileAtPath The destination (remote) file path.
///
/// \param progress Progress report callback - its argument represents uploaded bytes counter.
/// The return value false can be used to abort the operation.
///
///
/// throws:
/// NSError on error.
- (BOOL)uploadFileAtPath:(NSString * _Nonnull)path toFileAtPath:(NSString * _Nonnull)toFileAtPath error:(NSError * _Nullable * _Nullable)error progress:(BOOL (^ _Nullable)(uint64_t))progress;
/// Resume uploads of the file at the given file to the remote file.
/// \param path The  source (local) file path.
///
/// \param toFileAtPath The destination (remote) file path.
///
/// \param progress Progress report callback - its argument represents uploaded bytes counter (including skipped bytes).
/// The return value false can be used to abort the operation.
///
///
/// throws:
/// NSError on error.
- (BOOL)resumeUploadFileAtPath:(NSString * _Nonnull)path toFileAtPath:(NSString * _Nonnull)toFileAtPath error:(NSError * _Nullable * _Nullable)error progress:(BOOL (^ _Nullable)(uint64_t))progress;
/// Download the file at the given path to the local file.
/// \param path The source (remote) file path.
///
/// \param toFileAtPath The destination (local) file path.
///
/// \param progress Progress report callback - its two arguments are used to download bytes counter
/// and the size of the file to download. The return value false can be used to abort the operation.
///
///
/// throws:
/// NSError on error.
- (BOOL)downloadFileAtPath:(NSString * _Nonnull)path toFileAtPath:(NSString * _Nonnull)toFileAtPath error:(NSError * _Nullable * _Nullable)error progress:(BOOL (^ _Nullable)(uint64_t, uint64_t))progress;
/// Resume download of the file at the given path to the local file.
/// \param path The source (remote) file path.
///
/// \param toFileAtPath The destination (local) file path.
///
/// \param progress Progress report callback - its two arguments are used to download bytes counter (including skipped bytes)
/// and the size of the file to download. The return value false can be used to abort the operation.
///
///
/// throws:
/// NSError on error.
- (BOOL)resumeDownloadFileAtPath:(NSString * _Nonnull)path toFileAtPath:(NSString * _Nonnull)toFileAtPath error:(NSError * _Nullable * _Nullable)error progress:(BOOL (^ _Nullable)(uint64_t, uint64_t))progress;
/// SFTP server characters encoding.
@property (nonatomic, copy) NSString * _Nullable encoding;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// SFTP connection information
SWIFT_CLASS("_TtC3mft21MFTSftpConnectionInfo")
@interface MFTSftpConnectionInfo : NSObject
@property (nonatomic, copy) NSString * _Nonnull serverBanner;
@property (nonatomic, copy) NSString * _Nonnull issueBanner;
@property (nonatomic, copy) NSString * _Nonnull cipherIn;
@property (nonatomic, copy) NSString * _Nonnull cipherOut;
@property (nonatomic, copy) NSString * _Nonnull hmacIn;
@property (nonatomic, copy) NSString * _Nonnull hmacOut;
@property (nonatomic, copy) NSString * _Nonnull kexAlg;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull authMethods;
@property (nonatomic) int32_t protocolVerions;
@property (nonatomic) uint64_t maxOpenHandles;
@property (nonatomic) uint64_t maxPacketLenght;
@property (nonatomic) uint64_t maxReadLenght;
@property (nonatomic) uint64_t maxWriteLenght;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// This class represents a single SFTP items - a directory, file or symbilic link.
SWIFT_CLASS("_TtC3mft11MFTSftpItem")
@interface MFTSftpItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull filename;
@property (nonatomic, readonly) uint64_t size;
@property (nonatomic, readonly) uint32_t uid;
@property (nonatomic, readonly) uint32_t gid;
@property (nonatomic, readonly, copy) NSString * _Nonnull owner;
@property (nonatomic, readonly, copy) NSString * _Nonnull group;
@property (nonatomic, readonly) uint32_t permissions;
@property (nonatomic, readonly, copy) NSDate * _Nonnull atime;
@property (nonatomic, readonly) uint32_t atimeNanos;
@property (nonatomic, readonly, copy) NSDate * _Nonnull mtime;
@property (nonatomic, readonly) uint32_t mtimeNanos;
@property (nonatomic, readonly, copy) NSDate * _Nonnull createTime;
@property (nonatomic, readonly) uint32_t createTimeNanos;
@property (nonatomic, readonly) BOOL isDirectory;
@property (nonatomic, readonly) BOOL isSymlink;
@property (nonatomic, readonly) BOOL isSpecial;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#elif defined(__x86_64__) && __x86_64__
// Generated by Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
#ifndef MFT_SWIFT_H
#define MFT_SWIFT_H
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wgcc-compat"

#if !defined(__has_include)
# define __has_include(x) 0
#endif
#if !defined(__has_attribute)
# define __has_attribute(x) 0
#endif
#if !defined(__has_feature)
# define __has_feature(x) 0
#endif
#if !defined(__has_warning)
# define __has_warning(x) 0
#endif

#if __has_include(<swift/objc-prologue.h>)
# include <swift/objc-prologue.h>
#endif

#pragma clang diagnostic ignored "-Wauto-import"
#if defined(__OBJC__)
#include <Foundation/Foundation.h>
#endif
#if defined(__cplusplus)
#include <cstdint>
#include <cstddef>
#include <cstdbool>
#include <cstring>
#include <stdlib.h>
#include <new>
#include <type_traits>
#else
#include <stdint.h>
#include <stddef.h>
#include <stdbool.h>
#include <string.h>
#endif
#if defined(__cplusplus)
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wnon-modular-include-in-framework-module"
#if defined(__arm64e__) && __has_include(<ptrauth.h>)
# include <ptrauth.h>
#else
#pragma clang diagnostic push
#pragma clang diagnostic ignored "-Wreserved-macro-identifier"
# ifndef __ptrauth_swift_value_witness_function_pointer
#  define __ptrauth_swift_value_witness_function_pointer(x)
# endif
# ifndef __ptrauth_swift_class_method_pointer
#  define __ptrauth_swift_class_method_pointer(x)
# endif
#pragma clang diagnostic pop
#endif
#pragma clang diagnostic pop
#endif

#if !defined(SWIFT_TYPEDEFS)
# define SWIFT_TYPEDEFS 1
# if __has_include(<uchar.h>)
#  include <uchar.h>
# elif !defined(__cplusplus)
typedef unsigned char char8_t;
typedef uint_least16_t char16_t;
typedef uint_least32_t char32_t;
# endif
typedef float swift_float2  __attribute__((__ext_vector_type__(2)));
typedef float swift_float3  __attribute__((__ext_vector_type__(3)));
typedef float swift_float4  __attribute__((__ext_vector_type__(4)));
typedef double swift_double2  __attribute__((__ext_vector_type__(2)));
typedef double swift_double3  __attribute__((__ext_vector_type__(3)));
typedef double swift_double4  __attribute__((__ext_vector_type__(4)));
typedef int swift_int2  __attribute__((__ext_vector_type__(2)));
typedef int swift_int3  __attribute__((__ext_vector_type__(3)));
typedef int swift_int4  __attribute__((__ext_vector_type__(4)));
typedef unsigned int swift_uint2  __attribute__((__ext_vector_type__(2)));
typedef unsigned int swift_uint3  __attribute__((__ext_vector_type__(3)));
typedef unsigned int swift_uint4  __attribute__((__ext_vector_type__(4)));
#endif

#if !defined(SWIFT_PASTE)
# define SWIFT_PASTE_HELPER(x, y) x##y
# define SWIFT_PASTE(x, y) SWIFT_PASTE_HELPER(x, y)
#endif
#if !defined(SWIFT_METATYPE)
# define SWIFT_METATYPE(X) Class
#endif
#if !defined(SWIFT_CLASS_PROPERTY)
# if __has_feature(objc_class_property)
#  define SWIFT_CLASS_PROPERTY(...) __VA_ARGS__
# else
#  define SWIFT_CLASS_PROPERTY(...) 
# endif
#endif
#if !defined(SWIFT_RUNTIME_NAME)
# if __has_attribute(objc_runtime_name)
#  define SWIFT_RUNTIME_NAME(X) __attribute__((objc_runtime_name(X)))
# else
#  define SWIFT_RUNTIME_NAME(X) 
# endif
#endif
#if !defined(SWIFT_COMPILE_NAME)
# if __has_attribute(swift_name)
#  define SWIFT_COMPILE_NAME(X) __attribute__((swift_name(X)))
# else
#  define SWIFT_COMPILE_NAME(X) 
# endif
#endif
#if !defined(SWIFT_METHOD_FAMILY)
# if __has_attribute(objc_method_family)
#  define SWIFT_METHOD_FAMILY(X) __attribute__((objc_method_family(X)))
# else
#  define SWIFT_METHOD_FAMILY(X) 
# endif
#endif
#if !defined(SWIFT_NOESCAPE)
# if __has_attribute(noescape)
#  define SWIFT_NOESCAPE __attribute__((noescape))
# else
#  define SWIFT_NOESCAPE 
# endif
#endif
#if !defined(SWIFT_RELEASES_ARGUMENT)
# if __has_attribute(ns_consumed)
#  define SWIFT_RELEASES_ARGUMENT __attribute__((ns_consumed))
# else
#  define SWIFT_RELEASES_ARGUMENT 
# endif
#endif
#if !defined(SWIFT_WARN_UNUSED_RESULT)
# if __has_attribute(warn_unused_result)
#  define SWIFT_WARN_UNUSED_RESULT __attribute__((warn_unused_result))
# else
#  define SWIFT_WARN_UNUSED_RESULT 
# endif
#endif
#if !defined(SWIFT_NORETURN)
# if __has_attribute(noreturn)
#  define SWIFT_NORETURN __attribute__((noreturn))
# else
#  define SWIFT_NORETURN 
# endif
#endif
#if !defined(SWIFT_CLASS_EXTRA)
# define SWIFT_CLASS_EXTRA 
#endif
#if !defined(SWIFT_PROTOCOL_EXTRA)
# define SWIFT_PROTOCOL_EXTRA 
#endif
#if !defined(SWIFT_ENUM_EXTRA)
# define SWIFT_ENUM_EXTRA 
#endif
#if !defined(SWIFT_CLASS)
# if __has_attribute(objc_subclassing_restricted)
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_subclassing_restricted)) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# else
#  define SWIFT_CLASS(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
#  define SWIFT_CLASS_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_CLASS_EXTRA
# endif
#endif
#if !defined(SWIFT_RESILIENT_CLASS)
# if __has_attribute(objc_class_stub)
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME) __attribute__((objc_class_stub))
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) __attribute__((objc_class_stub)) SWIFT_CLASS_NAMED(SWIFT_NAME)
# else
#  define SWIFT_RESILIENT_CLASS(SWIFT_NAME) SWIFT_CLASS(SWIFT_NAME)
#  define SWIFT_RESILIENT_CLASS_NAMED(SWIFT_NAME) SWIFT_CLASS_NAMED(SWIFT_NAME)
# endif
#endif
#if !defined(SWIFT_PROTOCOL)
# define SWIFT_PROTOCOL(SWIFT_NAME) SWIFT_RUNTIME_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
# define SWIFT_PROTOCOL_NAMED(SWIFT_NAME) SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_PROTOCOL_EXTRA
#endif
#if !defined(SWIFT_EXTENSION)
# define SWIFT_EXTENSION(M) SWIFT_PASTE(M##_Swift_, __LINE__)
#endif
#if !defined(OBJC_DESIGNATED_INITIALIZER)
# if __has_attribute(objc_designated_initializer)
#  define OBJC_DESIGNATED_INITIALIZER __attribute__((objc_designated_initializer))
# else
#  define OBJC_DESIGNATED_INITIALIZER 
# endif
#endif
#if !defined(SWIFT_ENUM_ATTR)
# if __has_attribute(enum_extensibility)
#  define SWIFT_ENUM_ATTR(_extensibility) __attribute__((enum_extensibility(_extensibility)))
# else
#  define SWIFT_ENUM_ATTR(_extensibility) 
# endif
#endif
#if !defined(SWIFT_ENUM)
# define SWIFT_ENUM(_type, _name, _extensibility) enum _name : _type _name; enum SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# if __has_feature(generalized_swift_name)
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) enum _name : _type _name SWIFT_COMPILE_NAME(SWIFT_NAME); enum SWIFT_COMPILE_NAME(SWIFT_NAME) SWIFT_ENUM_ATTR(_extensibility) SWIFT_ENUM_EXTRA _name : _type
# else
#  define SWIFT_ENUM_NAMED(_type, _name, SWIFT_NAME, _extensibility) SWIFT_ENUM(_type, _name, _extensibility)
# endif
#endif
#if !defined(SWIFT_UNAVAILABLE)
# define SWIFT_UNAVAILABLE __attribute__((unavailable))
#endif
#if !defined(SWIFT_UNAVAILABLE_MSG)
# define SWIFT_UNAVAILABLE_MSG(msg) __attribute__((unavailable(msg)))
#endif
#if !defined(SWIFT_AVAILABILITY)
# define SWIFT_AVAILABILITY(plat, ...) __attribute__((availability(plat, __VA_ARGS__)))
#endif
#if !defined(SWIFT_WEAK_IMPORT)
# define SWIFT_WEAK_IMPORT __attribute__((weak_import))
#endif
#if !defined(SWIFT_DEPRECATED)
# define SWIFT_DEPRECATED __attribute__((deprecated))
#endif
#if !defined(SWIFT_DEPRECATED_MSG)
# define SWIFT_DEPRECATED_MSG(...) __attribute__((deprecated(__VA_ARGS__)))
#endif
#if !defined(SWIFT_DEPRECATED_OBJC)
# if __has_feature(attribute_diagnose_if_objc)
#  define SWIFT_DEPRECATED_OBJC(Msg) __attribute__((diagnose_if(1, Msg, "warning")))
# else
#  define SWIFT_DEPRECATED_OBJC(Msg) SWIFT_DEPRECATED_MSG(Msg)
# endif
#endif
#if defined(__OBJC__)
#if !defined(IBSegueAction)
# define IBSegueAction 
#endif
#endif
#if !defined(SWIFT_EXTERN)
# if defined(__cplusplus)
#  define SWIFT_EXTERN extern "C"
# else
#  define SWIFT_EXTERN extern
# endif
#endif
#if !defined(SWIFT_CALL)
# define SWIFT_CALL __attribute__((swiftcall))
#endif
#if !defined(SWIFT_INDIRECT_RESULT)
# define SWIFT_INDIRECT_RESULT __attribute__((swift_indirect_result))
#endif
#if !defined(SWIFT_CONTEXT)
# define SWIFT_CONTEXT __attribute__((swift_context))
#endif
#if !defined(SWIFT_ERROR_RESULT)
# define SWIFT_ERROR_RESULT __attribute__((swift_error_result))
#endif
#if defined(__cplusplus)
# define SWIFT_NOEXCEPT noexcept
#else
# define SWIFT_NOEXCEPT 
#endif
#if !defined(SWIFT_C_INLINE_THUNK)
# if __has_attribute(always_inline)
# if __has_attribute(nodebug)
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline)) __attribute__((nodebug))
# else
#  define SWIFT_C_INLINE_THUNK inline __attribute__((always_inline))
# endif
# else
#  define SWIFT_C_INLINE_THUNK inline
# endif
#endif
#if defined(_WIN32)
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL __declspec(dllimport)
#endif
#else
#if !defined(SWIFT_IMPORT_STDLIB_SYMBOL)
# define SWIFT_IMPORT_STDLIB_SYMBOL 
#endif
#endif
#if defined(__OBJC__)
#if __has_feature(objc_modules)
#if __has_warning("-Watimport-in-framework-header")
#pragma clang diagnostic ignored "-Watimport-in-framework-header"
#endif
@import Foundation;
@import ObjectiveC;
#endif

#endif
#pragma clang diagnostic ignored "-Wproperty-attribute-mismatch"
#pragma clang diagnostic ignored "-Wduplicate-method-arg"
#if __has_warning("-Wpragma-clang-attribute")
# pragma clang diagnostic ignored "-Wpragma-clang-attribute"
#endif
#pragma clang diagnostic ignored "-Wunknown-pragmas"
#pragma clang diagnostic ignored "-Wnullability"
#pragma clang diagnostic ignored "-Wdollar-in-identifier-extension"
#pragma clang diagnostic ignored "-Wunsafe-buffer-usage"

#if __has_attribute(external_source_symbol)
# pragma push_macro("any")
# undef any
# pragma clang attribute push(__attribute__((external_source_symbol(language="Swift", defined_in="mft",generated_declaration))), apply_to=any(function,enum,objc_interface,objc_category,objc_protocol))
# pragma pop_macro("any")
#endif

#if defined(__OBJC__)

/// Error codes used in NSError objects reported by methods of MFTSftpConnectionInfo class.
typedef SWIFT_ENUM(NSInteger, MFTErrorCode, open) {
  MFTErrorCodeNo_error = 0,
  MFTErrorCodeNo_session = 1,
  MFTErrorCodeNo_pubkey_method = 2,
  MFTErrorCodeNo_password_method = 3,
  MFTErrorCodeAuthentication_failed = 4,
  MFTErrorCodeLocal_read_error = 5,
  MFTErrorCodeLocal_write_error = 6,
  MFTErrorCodeLocal_open_error_for_reading = 7,
  MFTErrorCodeLocal_open_error_for_writing = 8,
  MFTErrorCodeLocal_file_not_readable = 9,
  MFTErrorCodeLocal_file_not_writable = 10,
  MFTErrorCodeWrong_keyfile = 11,
  MFTErrorCodeFile_not_found = 12,
  MFTErrorCodeCanceled = 999,
};

/// File system statistics.
SWIFT_CLASS("_TtC3mft18MFTFilesystemStats")
@interface MFTFilesystemStats : NSObject
@property (nonatomic) uint64_t size;
@property (nonatomic) uint64_t freeSpace;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// Status of the hosts.
typedef SWIFT_ENUM(NSInteger, MFTKnownHostStatus, open) {
  MFTKnownHostStatusKNOWN_HOSTS_ERROR = -2,
  MFTKnownHostStatusKNOWN_HOSTS_NOT_FOUND = -1,
  MFTKnownHostStatusKNOWN_HOSTS_UNKNOWN = 0,
  MFTKnownHostStatusKNOWN_HOSTS_OK = 1,
  MFTKnownHostStatusKNOWN_HOSTS_CHANGED = 2,
  MFTKnownHostStatusKNOWN_HOSTS_OTHER = 3,
  MFTKnownHostStatusNO_SESSION = 100,
};

@class NSString;
@class MFTSftpConnectionInfo;
@class MFTSftpItem;
@class NSOutputStream;
@class NSInputStream;
@class NSDate;
/// The class represents a single SFTP connection. It contains method for establishing connections,
/// authenticating on the server as well as methods for items manipulation (like uploading, downloading,
/// removing, creating, …).
/// The objects of this class are NOT thread safe and must NOT be used to running multiple operations
/// at the same time. If you need such functionality, create multiple MFTSftpConnection (and by doing that
/// establish multiple SFTP connections).
SWIFT_CLASS("_TtC3mft17MFTSftpConnection")
@interface MFTSftpConnection : NSObject
@property (nonatomic) NSInteger defRqCount;
/// Create a new connection with password based authentication data.
/// \param hostname The SFTP server hostname.
///
/// \param port The SFTP server port name.
///
/// \param username The user name to authenticate as.
///
/// \param password The user password.
///
- (nonnull instancetype)initWithHostname:(NSString * _Nonnull)hostname port:(NSInteger)port username:(NSString * _Nonnull)username password:(NSString * _Nonnull)password OBJC_DESIGNATED_INITIALIZER;
/// Create a new connection with public key based authentication data read from a file.
/// \param hostname The SFTP server hostname.
///
/// \param port The SFTP server port name.
///
/// \param username The user name to authenticate as.
///
/// \param prvKeyPath The path of file containing the private key to use.
///
/// \param passphrase The key passphrase to use - is no passphrase was set, pass a blank string.
///
- (nonnull instancetype)initWithHostname:(NSString * _Nonnull)hostname port:(NSInteger)port username:(NSString * _Nonnull)username prvKeyPath:(NSString * _Nonnull)prvKeyPath passphrase:(NSString * _Nonnull)passphrase OBJC_DESIGNATED_INITIALIZER;
/// Create a new connection with public key based authentication data read from a string.
/// \param hostname The SFTP server hostname.
///
/// \param port The SFTP server port name.
///
/// \param username The user name to authenticate as.
///
/// \param prvKey The private key to use.
///
/// \param passphrase The key passphrase to use - is no passphrase was set, pass a blank string.
///
- (nonnull instancetype)initWithHostname:(NSString * _Nonnull)hostname port:(NSInteger)port username:(NSString * _Nonnull)username prvKey:(NSString * _Nonnull)prvKey passphrase:(NSString * _Nonnull)passphrase OBJC_DESIGNATED_INITIALIZER;
/// Create a new connection with ssh-agent based auth
/// \param hostname The SFTP server hostname.
///
/// \param port The SFTP server port name.
///
/// \param username The user name to authenticate as.
///
/// \param sshAgentSocketPath Path to ssh-agent unix socket
///
- (nonnull instancetype)initWithHostname:(NSString * _Nonnull)hostname port:(NSInteger)port username:(NSString * _Nonnull)username sshAgentSocketPath:(NSString * _Nonnull)sshAgentSocketPath OBJC_DESIGNATED_INITIALIZER;
/// Determine the server connectivity state.
@property (nonatomic, readonly) BOOL connected;
/// Establish connection with the server.
///
/// throws:
/// NSError on connection error.
- (BOOL)connectAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Authentucate on the server. Prior to calling this function, the connection to the server.
/// must be established.
///
/// throws:
/// NSError on error.
- (BOOL)authenticateAndReturnError:(NSError * _Nullable * _Nullable)error;
/// Disconnect.
- (void)disconnect;
/// Return the connection info. The connection must be established but does not have to
/// be authenticated.
///
/// throws:
/// NSError on error and also when the connection is not established.
///
/// returns:
/// Connection info.
- (MFTSftpConnectionInfo * _Nullable)connectionInfoAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return the content of the given directory on the SFTP server. “.”, “..” and items with names that cannot
/// be converted using the current encoding are skipped.
/// \param path Remote directory path.
///
/// \param maxItems Limit for the number of items to returns,  0 = no limit.
///
///
/// throws:
/// NSError on error.
///
/// returns:
/// List of MFTSftpItem representing itemes on the given directory.
- (NSArray<MFTSftpItem *> * _Nullable)contentsOfDirectoryAtPath:(NSString * _Nonnull)path maxItems:(int64_t)maxItems error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Returns information for the remote item at the given path.
/// \param atPath The remote item path.
///
///
/// throws:
/// NSError on error (also when there is no item at the given path).
///
/// returns:
/// Temote item info.
- (MFTSftpItem * _Nullable)infoForFileAtPath:(NSString * _Nonnull)atPath error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Return canonical (absolute) path for the given path
/// \param path the path to canonicalize.
///
///
/// throws:
/// NSError on error.
///
/// returns:
/// The canonical path.
- (NSString * _Nullable)canonicalPathForPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Resolve the target of the given symbolic link.
/// \param path Symbolic link path.
///
///
/// throws:
/// NSError on error, also when the path does not point to a symbolic link.
///
/// returns:
/// The link target path.
- (NSString * _Nullable)effectiveTargetForPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Create a new directory at the given path.
/// \param path The path of the folder to create.
///
///
/// throws:
/// NSError on error.
- (BOOL)createDirectoryAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
/// Create a new symbolic link.
/// \param path The path of the symbolic link to create.
///
/// \param destPath The target of the symbolic link to create.
///
///
/// throws:
/// NSError on error.
- (BOOL)createSymbolicLinkAtPath:(NSString * _Nonnull)path withDestinationPath:(NSString * _Nonnull)destPath error:(NSError * _Nullable * _Nullable)error;
/// Remote the directory at the given path.
/// \param path The path to remove.
///
///
/// throws:
/// NSError on error.
- (BOOL)removeDirectoryAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
/// Remote the file or the symbolic link at the given path.
/// \param path The path to remove.
///
///
/// throws:
/// NSError on error.
- (BOOL)removeFileAtPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
/// Download the content of the file at the given path to the output stream.
/// \param path The path of the file to download.
///
/// \param outputStream The output strem to use for storing donwloaded content - if the stream is closed, it will be opened.
///
/// \param pos Starting position in the source file to download - if >0, the outputStram must be create for appending.
///
/// \param progress Progress report callback - its two arguments are used to download bytes counter (including skipped bytes)
/// and the size of the file to download. The return value false can be used to abort the operation.
///
///
/// throws:
/// NSError on error.
- (BOOL)contentsAtPath:(NSString * _Nonnull)path toStream:(NSOutputStream * _Nonnull)outputStream fromPosition:(uint64_t)pos error:(NSError * _Nullable * _Nullable)error progress:(BOOL (^ _Nullable)(uint64_t, uint64_t))progress;
/// Upload the content of the given input stream to the remove file at path.
/// \param inputStream The source of data to upload.
///
/// \param path The path of the file to upload to.
///
/// \param append Should the upload append to the file.
///
/// \param progress Progress report callback - its argument represents uploaded bytes counter (including skipped bytes).
/// The return value false can be used to abort the operation.
///
///
/// throws:
/// NSError on error.
- (BOOL)writeWithStream:(NSInputStream * _Nonnull)inputStream toFileAtPath:(NSString * _Nonnull)path append:(BOOL)append error:(NSError * _Nullable * _Nullable)error progress:(BOOL (^ _Nullable)(uint64_t))progress;
/// Copy the item to a new path of the SFTP server.
/// \param fromPath Source path (on the server).
///
/// \param toPath Destination path (on the server).
///
/// \param progress Progress report callback - its two arguments are used to copied bytes counter
/// and the size of the file to copy. The return value false can be used to abort the operation.
///
///
/// throws:
/// NSError on error.
- (BOOL)copyItemAtPath:(NSString * _Nonnull)fromPath toFileAtPath:(NSString * _Nonnull)toPath error:(NSError * _Nullable * _Nullable)error progress:(BOOL (^ _Nullable)(uint64_t, uint64_t))progress;
/// Move the item to a new path on the SFTP server. The operation is performed on the server without
/// downloading/uploading the file data.
/// \param atPath The current path of the item to move.
///
/// \param toPath The the path of the item.
///
///
/// throws:
/// NSError on error.
- (BOOL)moveItemAtPath:(NSString * _Nonnull)atPath toPath:(NSString * _Nonnull)toPath error:(NSError * _Nullable * _Nullable)error;
/// Set modification and access time of the remote item.
/// \param mtime Modification time to set.
///
/// \param atime Access time to set.
///
/// \param path The item path.
///
///
/// throws:
/// NSError on error.
- (BOOL)setWithModificationTime:(NSDate * _Nullable)mtime accessTime:(NSDate * _Nullable)atime forPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
/// Set permissions for the given remote item.
/// \param permissions POSIX permissions to set.
///
/// \param path The item path to set permissions.
///
///
/// throws:
/// NSError on error.
- (BOOL)setWithPermissions:(uint32_t)permissions forPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
/// Returns file system info.
/// \param path The path of the item to return file system info for.
///
///
/// throws:
/// NSError on error.
///
/// returns:
/// File system info for the file system on which the given item resides.
- (MFTFilesystemStats * _Nullable)filesystemStatsForPath:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Check is connected host is known based on hashes in the given file.
/// \param path The path of file with the known hosts hashes.
///
///
/// returns:
/// One of MFTKnownHostStatus representing the status. Note, that this function does not throw an exception,
/// but instead in case when there is no connection it returns .NO_SESSION.
- (enum MFTKnownHostStatus)knownHostStatusInFile:(NSString * _Nonnull)path SWIFT_WARN_UNUSED_RESULT;
/// Add the hash of the connected host to the given file.
/// \param path The path of the file with known hosts hashes.
///
///
/// throws:
/// NSError on error.
- (BOOL)addKnownHostNameToFile:(NSString * _Nonnull)path error:(NSError * _Nullable * _Nullable)error;
/// Returns the human readable fingerprint hash for the current connection.
///
/// throws:
/// NSError on error.
///
/// returns:
/// The fingerprint hash.
- (NSString * _Nullable)fingerprintHashAndReturnError:(NSError * _Nullable * _Nullable)error SWIFT_WARN_UNUSED_RESULT;
/// Upload the file at the given file to the remote file.
/// \param path The  source (local) file path.
///
/// \param toFileAtPath The destination (remote) file path.
///
/// \param progress Progress report callback - its argument represents uploaded bytes counter.
/// The return value false can be used to abort the operation.
///
///
/// throws:
/// NSError on error.
- (BOOL)uploadFileAtPath:(NSString * _Nonnull)path toFileAtPath:(NSString * _Nonnull)toFileAtPath error:(NSError * _Nullable * _Nullable)error progress:(BOOL (^ _Nullable)(uint64_t))progress;
/// Resume uploads of the file at the given file to the remote file.
/// \param path The  source (local) file path.
///
/// \param toFileAtPath The destination (remote) file path.
///
/// \param progress Progress report callback - its argument represents uploaded bytes counter (including skipped bytes).
/// The return value false can be used to abort the operation.
///
///
/// throws:
/// NSError on error.
- (BOOL)resumeUploadFileAtPath:(NSString * _Nonnull)path toFileAtPath:(NSString * _Nonnull)toFileAtPath error:(NSError * _Nullable * _Nullable)error progress:(BOOL (^ _Nullable)(uint64_t))progress;
/// Download the file at the given path to the local file.
/// \param path The source (remote) file path.
///
/// \param toFileAtPath The destination (local) file path.
///
/// \param progress Progress report callback - its two arguments are used to download bytes counter
/// and the size of the file to download. The return value false can be used to abort the operation.
///
///
/// throws:
/// NSError on error.
- (BOOL)downloadFileAtPath:(NSString * _Nonnull)path toFileAtPath:(NSString * _Nonnull)toFileAtPath error:(NSError * _Nullable * _Nullable)error progress:(BOOL (^ _Nullable)(uint64_t, uint64_t))progress;
/// Resume download of the file at the given path to the local file.
/// \param path The source (remote) file path.
///
/// \param toFileAtPath The destination (local) file path.
///
/// \param progress Progress report callback - its two arguments are used to download bytes counter (including skipped bytes)
/// and the size of the file to download. The return value false can be used to abort the operation.
///
///
/// throws:
/// NSError on error.
- (BOOL)resumeDownloadFileAtPath:(NSString * _Nonnull)path toFileAtPath:(NSString * _Nonnull)toFileAtPath error:(NSError * _Nullable * _Nullable)error progress:(BOOL (^ _Nullable)(uint64_t, uint64_t))progress;
/// SFTP server characters encoding.
@property (nonatomic, copy) NSString * _Nullable encoding;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

/// SFTP connection information
SWIFT_CLASS("_TtC3mft21MFTSftpConnectionInfo")
@interface MFTSftpConnectionInfo : NSObject
@property (nonatomic, copy) NSString * _Nonnull serverBanner;
@property (nonatomic, copy) NSString * _Nonnull issueBanner;
@property (nonatomic, copy) NSString * _Nonnull cipherIn;
@property (nonatomic, copy) NSString * _Nonnull cipherOut;
@property (nonatomic, copy) NSString * _Nonnull hmacIn;
@property (nonatomic, copy) NSString * _Nonnull hmacOut;
@property (nonatomic, copy) NSString * _Nonnull kexAlg;
@property (nonatomic, copy) NSArray<NSString *> * _Nonnull authMethods;
@property (nonatomic) int32_t protocolVerions;
@property (nonatomic) uint64_t maxOpenHandles;
@property (nonatomic) uint64_t maxPacketLenght;
@property (nonatomic) uint64_t maxReadLenght;
@property (nonatomic) uint64_t maxWriteLenght;
- (nonnull instancetype)init OBJC_DESIGNATED_INITIALIZER;
@end

/// This class represents a single SFTP items - a directory, file or symbilic link.
SWIFT_CLASS("_TtC3mft11MFTSftpItem")
@interface MFTSftpItem : NSObject
@property (nonatomic, readonly, copy) NSString * _Nonnull filename;
@property (nonatomic, readonly) uint64_t size;
@property (nonatomic, readonly) uint32_t uid;
@property (nonatomic, readonly) uint32_t gid;
@property (nonatomic, readonly, copy) NSString * _Nonnull owner;
@property (nonatomic, readonly, copy) NSString * _Nonnull group;
@property (nonatomic, readonly) uint32_t permissions;
@property (nonatomic, readonly, copy) NSDate * _Nonnull atime;
@property (nonatomic, readonly) uint32_t atimeNanos;
@property (nonatomic, readonly, copy) NSDate * _Nonnull mtime;
@property (nonatomic, readonly) uint32_t mtimeNanos;
@property (nonatomic, readonly, copy) NSDate * _Nonnull createTime;
@property (nonatomic, readonly) uint32_t createTimeNanos;
@property (nonatomic, readonly) BOOL isDirectory;
@property (nonatomic, readonly) BOOL isSymlink;
@property (nonatomic, readonly) BOOL isSpecial;
- (nonnull instancetype)init SWIFT_UNAVAILABLE;
+ (nonnull instancetype)new SWIFT_UNAVAILABLE_MSG("-init is unavailable");
@end

#endif
#if __has_attribute(external_source_symbol)
# pragma clang attribute pop
#endif
#if defined(__cplusplus)
#endif
#pragma clang diagnostic pop
#endif

#else
#error unsupported Swift architecture
#endif
