// swift-interface-format-version: 1.0
// swift-compiler-version: Apple Swift version 6.1.2 effective-5.10 (swiftlang-6.1.2.1.2 clang-1700.0.13.5)
// swift-module-flags: -target arm64-apple-macos10.13.6 -enable-objc-interop -enable-library-evolution -swift-version 5 -enforce-exclusivity=checked -O -enable-experimental-feature DebugDescriptionMacro -enable-bare-slash-regex -module-name mft
// swift-module-flags-ignorable: -no-verify-emitted-module-interface -interface-compiler-version 6.1.2
import Foundation
import Swift
import _Concurrency
import _StringProcessing
import _SwiftConcurrencyShims
@_exported import mft
@objc @_hasMissingDesignatedInitializers @objcMembers public class MFTSftpItem : ObjectiveC.NSObject {
  @objc final public let filename: Swift.String
  @objc final public let size: Swift.UInt64
  @objc final public let uid: Swift.UInt32
  @objc final public let gid: Swift.UInt32
  @objc final public let owner: Swift.String
  @objc final public let group: Swift.String
  @objc final public let permissions: Swift.UInt32
  @objc final public let atime: Foundation.Date
  @objc final public let atimeNanos: Swift.UInt32
  @objc final public let mtime: Foundation.Date
  @objc final public let mtimeNanos: Swift.UInt32
  @objc final public let createTime: Foundation.Date
  @objc final public let createTimeNanos: Swift.UInt32
  @objc final public let isDirectory: Swift.Bool
  @objc final public let isSymlink: Swift.Bool
  @objc final public let isSpecial: Swift.Bool
  @objc deinit
}
@objc public enum MFTKnownHostStatus : Swift.Int {
  case KNOWN_HOSTS_ERROR = -2, KNOWN_HOSTS_NOT_FOUND = -1, KNOWN_HOSTS_UNKNOWN = 0, KNOWN_HOSTS_OK, KNOWN_HOSTS_CHANGED, KNOWN_HOSTS_OTHER, NO_SESSION = 100
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_hasMissingDesignatedInitializers @objcMembers public class MFTFilesystemStats : ObjectiveC.NSObject {
  @objc public var size: Swift.UInt64
  @objc public var freeSpace: Swift.UInt64
  @objc deinit
}
@objc public enum MFTErrorCode : Swift.Int {
  case no_error = 0, no_session, no_pubkey_method, no_password_method, authentication_failed, local_read_error, local_write_error, local_open_error_for_reading, local_open_error_for_writing, local_file_not_readable, local_file_not_writable, wrong_keyfile, file_not_found, canceled = 999
  public init?(rawValue: Swift.Int)
  public typealias RawValue = Swift.Int
  public var rawValue: Swift.Int {
    get
  }
}
@objc @_inheritsConvenienceInitializers @objcMembers public class MFTSftpConnectionInfo : ObjectiveC.NSObject {
  @objc public var serverBanner: Swift.String
  @objc public var issueBanner: Swift.String
  @objc public var cipherIn: Swift.String
  @objc public var cipherOut: Swift.String
  @objc public var hmacIn: Swift.String
  @objc public var hmacOut: Swift.String
  @objc public var kexAlg: Swift.String
  @objc public var authMethods: [Swift.String]
  @objc public var protocolVerions: Swift.Int32
  @objc public var maxOpenHandles: Swift.UInt64
  @objc public var maxPacketLenght: Swift.UInt64
  @objc public var maxReadLenght: Swift.UInt64
  @objc public var maxWriteLenght: Swift.UInt64
  @objc override dynamic public init()
  @objc deinit
}
@objc @objcMembers public class MFTSftpConnection : ObjectiveC.NSObject {
  @objc public var defRqCount: Swift.Int
  @objc public init(hostname: Swift.String, port: Swift.Int, username: Swift.String, password: Swift.String)
  @objc public init(hostname: Swift.String, port: Swift.Int, username: Swift.String, prvKeyPath: Swift.String, passphrase: Swift.String)
  @objc public init(hostname: Swift.String, port: Swift.Int, username: Swift.String, prvKey: Swift.String, passphrase: Swift.String)
  @objc public init(hostname: Swift.String, port: Swift.Int, username: Swift.String, sshAgentSocketPath: Swift.String)
  @objc deinit
  @objc public var connected: Swift.Bool {
    @objc get
  }
  @objc public func connect() throws
  @objc public func authenticate() throws
  @objc public func disconnect()
  @objc public func connectionInfo() throws -> mft.MFTSftpConnectionInfo
  @objc public func contentsOfDirectory(atPath path: Swift.String, maxItems: Swift.Int64) throws -> [mft.MFTSftpItem]
  @objc public func infoForFile(atPath: Swift.String) throws -> mft.MFTSftpItem
  @objc public func canonicalPath(forPath path: Swift.String) throws -> Swift.String
  @objc public func effectiveTarget(forPath path: Swift.String) throws -> Swift.String
  @objc public func createDirectory(atPath path: Swift.String) throws
  @objc public func createSymbolicLink(atPath path: Swift.String, withDestinationPath destPath: Swift.String) throws
  @objc public func removeDirectory(atPath path: Swift.String) throws
  @objc public func removeFile(atPath path: Swift.String) throws
  @objc public func contents(atPath path: Swift.String, toStream outputStream: Foundation.OutputStream, fromPosition pos: Swift.UInt64, progress: ((Swift.UInt64, Swift.UInt64) -> Swift.Bool)?) throws
  @objc public func write(stream inputStream: Foundation.InputStream, toFileAtPath path: Swift.String, append: Swift.Bool, progress: ((Swift.UInt64) -> Swift.Bool)?) throws
  @objc public func copyItem(atPath fromPath: Swift.String, toFileAtPath toPath: Swift.String, progress: ((Swift.UInt64, Swift.UInt64) -> Swift.Bool)?) throws
  @objc public func moveItem(atPath: Swift.String, toPath: Swift.String) throws
  @objc public func set(modificationTime mtime: Foundation.Date?, accessTime atime: Foundation.Date?, forPath path: Swift.String) throws
  @objc public func set(permissions: Swift.UInt32, forPath path: Swift.String) throws
  @objc public func filesystemStats(forPath path: Swift.String) throws -> mft.MFTFilesystemStats
  @objc public func knownHostStatus(inFile path: Swift.String) -> mft.MFTKnownHostStatus
  @objc public func addKnownHostName(toFile path: Swift.String) throws
  @objc public func fingerprintHash() throws -> Swift.String
  @objc public func uploadFile(atPath path: Swift.String, toFileAtPath: Swift.String, progress: ((Swift.UInt64) -> Swift.Bool)?) throws
  @objc public func resumeUploadFile(atPath path: Swift.String, toFileAtPath: Swift.String, progress: ((Swift.UInt64) -> Swift.Bool)?) throws
  @objc public func downloadFile(atPath path: Swift.String, toFileAtPath: Swift.String, progress: ((Swift.UInt64, Swift.UInt64) -> Swift.Bool)?) throws
  @objc public func resumeDownloadFile(atPath path: Swift.String, toFileAtPath: Swift.String, progress: ((Swift.UInt64, Swift.UInt64) -> Swift.Bool)?) throws
  @objc public var encoding: Swift.String? {
    @objc get
    @objc set
  }
}
extension mft.MFTKnownHostStatus : Swift.Equatable {}
extension mft.MFTKnownHostStatus : Swift.Hashable {}
extension mft.MFTKnownHostStatus : Swift.RawRepresentable {}
extension mft.MFTErrorCode : Swift.Equatable {}
extension mft.MFTErrorCode : Swift.Hashable {}
extension mft.MFTErrorCode : Swift.RawRepresentable {}
